{"version":3,"sources":["components/Users/Users.js","components/User/User.js","App.js","serviceWorker.js","index.js"],"names":["Users","props","classes","makeStyles","table","minWidth","fetchUsers","axios","get","then","res","setState","users","data","state","this","TableContainer","component","Paper","Table","className","aria-label","TableHead","TableRow","TableCell","align","TableBody","map","row","key","name","scope","id","onClick","onUserClick","username","email","address","street","city","phone","website","company","Component","User","content","userDataObj","isDrawerOpened","IconButton","onSeeMoreInfo","user","fontSize","onCloseDrawer","drawerContent","App","toggleDrawer","drawerOpenState","userData","redirectToUserPage","userId","console","log","clickedUserRecord","Drawer","anchor","open","onClose","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.99f70bd6.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nimport './Users.scss';\r\nimport axios from 'axios';\r\nimport {makeStyles} from '@material-ui/core/styles';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Paper from '@material-ui/core/Paper';\r\n\r\n\r\n\r\nclass Users extends Component {\r\n  classes = makeStyles({\r\n    table: {\r\n      minWidth: 650,\r\n    },\r\n  });\r\n\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      users: []\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.fetchUsers();\r\n  }\r\n\r\n\r\n  fetchUsers = () => {\r\n    axios.get('https://jsonplaceholder.typicode.com/users')\r\n      .then((res) => {\r\n        this.setState({\r\n          users: res.data\r\n        });\r\n      });\r\n  };\r\n\r\n\r\n  render() {\r\n    return (\r\n      <TableContainer component={Paper}>\r\n        <Table className={this.classes.table} aria-label=\"simple table\">\r\n          <TableHead>\r\n            <TableRow>\r\n              <TableCell>Full name</TableCell>\r\n              <TableCell align=\"right\">Username</TableCell>\r\n              <TableCell align=\"right\">Email</TableCell>\r\n              <TableCell align=\"right\">Address</TableCell>\r\n              <TableCell align=\"right\">Phone</TableCell>\r\n              <TableCell align=\"right\">Website</TableCell>\r\n              <TableCell align=\"right\">Company</TableCell>\r\n            </TableRow>\r\n          </TableHead>\r\n          <TableBody>\r\n            {this.state.users.map(row => (\r\n              <TableRow key={row.name}>\r\n                <TableCell component=\"th\" scope=\"row\">\r\n                    <span id=\"full-name\" onClick={() => this.props.onUserClick(row)}>\r\n                      {row.name}\r\n                    </span>\r\n                </TableCell>\r\n                <TableCell align=\"right\">{row.username}</TableCell>\r\n                <TableCell align=\"right\">{row.email}</TableCell>\r\n                <TableCell align=\"right\">st. {row.address.street}, {row.address.city}</TableCell>\r\n                <TableCell align=\"right\">{row.phone}</TableCell>\r\n                <TableCell align=\"right\">{row.website}</TableCell>\r\n                <TableCell align=\"right\">{row.company.name}</TableCell>\r\n              </TableRow>\r\n            ))}\r\n          </TableBody>\r\n        </Table>\r\n      </TableContainer>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Users;\r\n","import React from 'react';\r\nimport './User.scss';\r\nimport VisibilityIcon from '@material-ui/icons/Visibility';\r\nimport HighlightOffIcon from '@material-ui/icons/HighlightOff';\r\nimport IconButton from '@material-ui/core/IconButton';\r\n\r\n\r\n\r\nconst User = (props) => {\r\n\r\n  const drawerContent = () => {\r\n    let content = null;\r\n    if (props.userDataObj.isDrawerOpened) {\r\n      content = <div>\r\n        <div id=\"title\">\r\n          <h1>User info: </h1>\r\n\r\n          <div className=\"icons\">\r\n            <IconButton onClick={() => props.onSeeMoreInfo(props.userDataObj.user.id)}>\r\n              <VisibilityIcon fontSize=\"large\"/>\r\n            </IconButton>\r\n            <IconButton onClick={() => props.onCloseDrawer()}>\r\n              <HighlightOffIcon fontSize=\"large\"/>\r\n            </IconButton>\r\n          </div>\r\n        </div>\r\n\r\n        <p>{props.userDataObj.user.name}</p>\r\n        <p>{props.userDataObj.user.username}</p>\r\n        <p>{props.userDataObj.user.email}</p>\r\n        <p>{props.userDataObj.user.phone}</p>\r\n        <p>{props.userDataObj.user.website}</p>\r\n        <p>{props.userDataObj.user.company.name}</p>\r\n      </div>\r\n    }\r\n\r\n    return (\r\n      <div>\r\n        {content}\r\n      </div>\r\n    )\r\n  };\r\n\r\n\r\n  return (\r\n    <div className=\"user\">\r\n      {drawerContent()}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default User;\r\n","import React, {Component} from 'react';\nimport './App.css';\nimport Users from \"./components/Users/Users\";\nimport User from \"./components/User/User\";\nimport Drawer from '@material-ui/core/Drawer';\n\n\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      isDrawerOpened: false,\n      user: {}\n    };\n  }\n\n\n  toggleDrawer = (drawerOpenState, userData = {}) => {\n    this.setState({\n      ...this.state,\n      isDrawerOpened: drawerOpenState,\n      user: userData\n    });\n  };\n\n  redirectToUserPage = userId => {\n    this.toggleDrawer(false);\n\n    console.log('>>>>>>>>>>>>>>>>>>>>>>>>>>>>', userId);\n    // todo redirect to user page\n  };\n\n\n  render() {\n    return (\n      <div>\n        <Users onUserClick={(clickedUserRecord) => this.toggleDrawer(true, clickedUserRecord)}/>\n\n        <Drawer anchor=\"right\" open={this.state.isDrawerOpened} onClose={() => this.toggleDrawer(false)}>\n          <User userDataObj={this.state}\n                onCloseDrawer={() => this.toggleDrawer(false)}\n                onSeeMoreInfo={(id) => this.redirectToUserPage(id)}/>\n        </Drawer>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}