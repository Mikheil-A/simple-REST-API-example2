{"version":3,"sources":["components/UserContent/UserContent.js","components/UserDrawer/UserDrawer.js","components/Users/Users.js","components/User/User.js","components/Posts/Posts.js","components/NotFound/NotFound.js","App.js","serviceWorker.js","index.js"],"names":["UserContent","props","user","name","username","email","phone","website","company","UserDrawer","className","id","IconButton","onClick","onSeeMoreInfo","fontSize","onCloseDrawer","Users","classes","makeStyles","table","minWidth","fetchUsers","axios","get","then","res","setState","users","data","toggleDrawer","drawerOpenState","userData","state","isDrawerOpened","selectedUser","redirectToSelectedUserPage","userId","fetchUserById","userComponent","selectedUserId","this","to","pathname","TableContainer","component","Paper","Table","aria-label","TableHead","TableRow","TableCell","align","TableBody","map","row","key","scope","address","street","city","Drawer","anchor","open","onClose","Component","User","location","Posts","fetchUserPosts","posts","renderPosts","length","forEach","post","push","title","body","match","params","NotFound","redirect","timeoutInterval","setTimeout","clearTimeout","App","exact","path","render","Boolean","window","hostname","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.aecb14f4.chunk.js","sourcesContent":["import React from 'react';\r\nimport './UserContent.scss';\r\n\r\n\r\nconst UserContent = (props) => {\r\n\r\n  return (\r\n    <div>\r\n      <p>{props.user.name}</p>\r\n      <p>{props.user.username}</p>\r\n      <p>{props.user.email}</p>\r\n      <p>{props.user.phone}</p>\r\n      <p>{props.user.website}</p>\r\n      <p>{props.user.company.name}</p>\r\n    </div>\r\n  )\r\n};\r\n\r\nexport default UserContent;\r\n","import React from 'react';\r\nimport './UserDrawer.scss';\r\nimport VisibilityIcon from '@material-ui/icons/Visibility';\r\nimport HighlightOffIcon from '@material-ui/icons/HighlightOff';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport UserContent from \"../UserContent/UserContent\";\r\n\r\n\r\nconst UserDrawer = (props) => {\r\n\r\n  return (\r\n    <div className=\"user-drawer\">\r\n      <div id=\"title\">\r\n        <h1>User info: </h1>\r\n\r\n        <div className=\"icons\">\r\n          <IconButton onClick={() => props.onSeeMoreInfo(props.user.id)}>\r\n            <VisibilityIcon fontSize=\"large\"/>\r\n          </IconButton>\r\n          <IconButton onClick={() => props.onCloseDrawer()}>\r\n            <HighlightOffIcon fontSize=\"large\"/>\r\n          </IconButton>\r\n        </div>\r\n      </div>\r\n\r\n      <UserContent user={props.user}/>\r\n    </div>\r\n  )\r\n};\r\n\r\nexport default UserDrawer;\r\n","import React, {Component} from 'react';\r\nimport './Users.scss';\r\nimport {makeStyles} from '@material-ui/core/styles';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Drawer from \"@material-ui/core/Drawer\";\r\nimport UserDrawer from \"../UserDrawer/UserDrawer\";\r\nimport axios from \"axios\";\r\nimport {Redirect} from 'react-router-dom';\r\n\r\n\r\n\r\nclass Users extends Component {\r\n  classes = makeStyles({\r\n    table: {\r\n      minWidth: 650,\r\n    },\r\n  });\r\n\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      users: [],\r\n      isDrawerOpened: false,\r\n      selectedUser: {},\r\n      selectedUserId: null\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.fetchUsers();\r\n  }\r\n\r\n\r\n  fetchUsers = () => {\r\n    axios.get('https://jsonplaceholder.typicode.com/users')\r\n      .then((res) => {\r\n        this.setState({\r\n          users: res.data\r\n        });\r\n      });\r\n  };\r\n\r\n  toggleDrawer = (drawerOpenState, userData = {}) => {\r\n    this.setState({\r\n      ...this.state,\r\n      isDrawerOpened: drawerOpenState,\r\n      selectedUser: userData\r\n    });\r\n  };\r\n\r\n  redirectToSelectedUserPage = userId => {\r\n    this.toggleDrawer(false);\r\n    this.fetchUserById(userId);\r\n  };\r\n\r\n  userComponent = () => {\r\n    if (this.state.isDrawerOpened) {\r\n      return <UserDrawer user={this.state.selectedUser}\r\n                         onCloseDrawer={() => this.toggleDrawer(false)}\r\n                         onSeeMoreInfo={(id) => this.redirectToSelectedUserPage(id)}/>;\r\n    }\r\n    return null;\r\n  };\r\n\r\n  fetchUserById = (id) => {\r\n    axios.get('https://jsonplaceholder.typicode.com/users/' + id)\r\n      .then((res) => {\r\n        this.setState({\r\n          ...this.state,\r\n          selectedUser: res.data,\r\n          selectedUserId: id\r\n        });\r\n      });\r\n  };\r\n\r\n\r\n  render() {\r\n    if (this.state.selectedUserId) {\r\n      return <Redirect to={{\r\n        pathname: `/user/${this.state.selectedUserId}`,\r\n        state: {user: this.state.selectedUser}\r\n      }}/>;\r\n    }\r\n\r\n    return (\r\n      <div>\r\n        <TableContainer component={Paper}>\r\n          <Table className={this.classes.table} aria-label=\"simple table\">\r\n            <TableHead>\r\n              <TableRow>\r\n                <TableCell>Full name</TableCell>\r\n                <TableCell align=\"right\">Username</TableCell>\r\n                <TableCell align=\"right\">Email</TableCell>\r\n                <TableCell align=\"right\">Address</TableCell>\r\n                <TableCell align=\"right\">Phone</TableCell>\r\n                <TableCell align=\"right\">Website</TableCell>\r\n                <TableCell align=\"right\">Company</TableCell>\r\n              </TableRow>\r\n            </TableHead>\r\n            <TableBody>\r\n              {this.state.users.map(row => (\r\n                <TableRow key={row.name}>\r\n                  <TableCell component=\"th\" scope=\"row\">\r\n                    <span id=\"full-name\" onClick={() => this.toggleDrawer(true, row)}>\r\n                      {row.name}\r\n                    </span>\r\n                  </TableCell>\r\n                  <TableCell align=\"right\">{row.username}</TableCell>\r\n                  <TableCell align=\"right\">{row.email}</TableCell>\r\n                  <TableCell align=\"right\">st. {row.address.street}, {row.address.city}</TableCell>\r\n                  <TableCell align=\"right\">{row.phone}</TableCell>\r\n                  <TableCell align=\"right\">{row.website}</TableCell>\r\n                  <TableCell align=\"right\">{row.company.name}</TableCell>\r\n                </TableRow>\r\n              ))}\r\n            </TableBody>\r\n          </Table>\r\n        </TableContainer>\r\n\r\n        <Drawer anchor=\"right\" open={this.state.isDrawerOpened} onClose={() => this.toggleDrawer(false)}>\r\n          {this.userComponent()}\r\n        </Drawer>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Users;\r\n","import React from 'react';\r\nimport './User.scss';\r\nimport UserContent from \"../UserContent/UserContent\";\r\nimport {Link} from \"react-router-dom\";\r\n\r\n\r\nconst User = (props) => (\r\n  <div className=\"user\">\r\n    <nav>\r\n      <Link to=\"/users\">Users</Link>\r\n      <Link to={{\r\n        pathname: `/posts/${props.location.state.user.id}`\r\n      }}>Posts</Link>\r\n    </nav>\r\n\r\n    <div id=\"user-content\">\r\n      <UserContent user={props.location.state.user}/>\r\n    </div>\r\n  </div>\r\n);\r\n\r\nexport default User;\r\n","import React, {Component} from 'react';\r\nimport './Posts.scss';\r\nimport axios from \"axios\";\r\nimport {Link} from \"react-router-dom\";\r\n\r\n\r\nclass Posts extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      posts: []\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.fetchUserPosts(this.props.match.params.userId);\r\n  }\r\n\r\n\r\n  fetchUserPosts = (userId) => {\r\n    axios.get('https://jsonplaceholder.typicode.com/posts?userId=' + userId)\r\n      .then((res) => {\r\n        this.setState({\r\n          ...this.state,\r\n          posts: res.data\r\n        });\r\n      });\r\n  };\r\n\r\n  renderPosts = () => {\r\n    let posts = [];\r\n    if (this.state.posts.length > 0) {\r\n      this.state.posts.forEach(post => {\r\n        posts.push(\r\n          <div key={post.id}>\r\n            <h2>({post.id}) {post.title}</h2>\r\n            <p>{post.body}</p>\r\n          </div>\r\n        )\r\n      });\r\n    }\r\n    return posts;\r\n  };\r\n\r\n\r\n  render() {\r\n    return <div>\r\n      <nav>\r\n        <Link to=\"/users\">Users</Link>\r\n      </nav>\r\n\r\n      {this.renderPosts()}\r\n    </div>\r\n  }\r\n}\r\n\r\nexport default Posts;\r\n","import React, {Component} from 'react';\r\nimport './NotFound.scss';\r\nimport {Redirect} from 'react-router-dom';\r\n\r\n\r\nclass NotFound extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      redirect: false\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.timeoutInterval = setTimeout(() => this.setState({redirect: true}), 1000);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    clearTimeout(this.timeoutInterval);\r\n  }\r\n\r\n\r\n  render() {\r\n    if (this.state.redirect) {\r\n      return <Redirect to=\"\"/>;\r\n    }\r\n\r\n    return <div className=\"not-found\">\r\n      <h1>Oops! Page not found.</h1>\r\n    </div>\r\n  }\r\n}\r\n\r\nexport default NotFound;\r\n","import React from 'react';\nimport './App.css';\nimport Users from \"./components/Users/Users\";\nimport User from \"./components/User/User\";\nimport Posts from \"./components/Posts/Posts\";\nimport NotFound from \"./components/NotFound/NotFound\";\nimport {Route, Switch, Redirect} from 'react-router-dom';\n\n\n\nconst App = () => {\n  return (\n    <Switch>\n      <Route exact path=\"/\" render={() => (\n        <Redirect to=\"/users\"/>\n      )}/>\n      <Route path=\"/users\" component={Users}/>\n      <Route path=\"/user/:id\" component={User}/>\n      <Route path=\"/posts/:userId\" component={Posts}/>\n      <Route component={NotFound}/>\n    </Switch>\n  )\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {BrowserRouter} from 'react-router-dom'\n\n\n\nReactDOM.render(\n  <BrowserRouter>\n    <App/>\n  </BrowserRouter>, document.getElementById('root'));\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}